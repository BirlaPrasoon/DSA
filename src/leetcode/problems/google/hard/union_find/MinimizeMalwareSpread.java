package leetcode.problems.google.hard.union_find;

import java.util.Arrays;
import java.util.HashMap;

public class MinimizeMalwareSpread {

    /**
     * You are given a network of n nodes represented as an n x n adjacency matrix graph, where the ith node is directly connected to the jth node if graph[i][j] == 1.<br><br>
     * <p>
     * Some nodes initial are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.<br><br>
     * <p>
     * Suppose M(initial) is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from initial.<br><br>
     * <p>
     * Return the node that, if removed, would minimize M(initial). If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.<br><br>
     * <p>
     * Note that if a node was removed from the initial list of infected nodes, it might still be infected later due to the malware spread.<br><br>
     * <p>
     * <p>
     * <p>
     * Example 1:<br>
     * <p>
     * Input: graph = [<br>[1,1,0],<br>[1,1,0],<br>[0,0,1]<br>],<br> initial = [0,1]<br>
     * Output: 0<br><br>
     * Example 2:<br>
     * <p>
     * Input: graph = [<br>[1,0,0],<br>[0,1,0],<br>[0,0,1]<br>],<br> initial = [0,2]<br>
     * Output: 0<br><br>
     * Example 3:<br>
     * <p>
     * Input: graph = [<br>[1,1,1],<br>[1,1,1],<br>[1,1,1]<br>],<br> initial = [1,2]<br>
     * Output: 1<br>
     */

    // DFS
    // O(N^2)
    class SolutionDFS {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            // 1. Color each component.
            // colors[node] = the color of this node.

            int N = graph.length;
            int[] colors = new int[N];
            Arrays.fill(colors, -1);
            int C = 0;

            for (int node = 0; node < N; ++node)
                if (colors[node] == -1) dfs(graph, colors, node, C++);

            // 2. Size of each color.
            int[] size = new int[C];
            for (int color : colors)
                size[color]++;

            // 3. Find unique colors.
            int[] colorCount = new int[C];
            for (int node : initial)
                colorCount[colors[node]]++;

            // 4. Answer
            int ans = Integer.MAX_VALUE;
            for (int node : initial) {
                int c = colors[node];
                if (colorCount[c] == 1) {
                    if (ans == Integer.MAX_VALUE) ans = node;
                    else if (size[c] > size[colors[ans]]) ans = node;
                    else if (size[c] == size[colors[ans]] && node < ans) ans = node;
                }
            }

            if (ans == Integer.MAX_VALUE) for (int node : initial)
                ans = Math.min(ans, node);

            return ans;
        }

        public void dfs(int[][] graph, int[] colors, int node, int color) {
            colors[node] = color;
            for (int nei = 0; nei < graph.length; ++nei)
                if (graph[node][nei] == 1 && colors[nei] == -1) dfs(graph, colors, nei, color);
        }
    }

    // Union Find

    /**
     * Intuition and Algorithm<br>
     * <p>
     * As in Approach 1, it is clear that we will need to consider components of the graph. A "Disjoint Set Union" (DSU) data structure is ideal for this.<br>
     * <p>
     * We will skip the explanation of how a DSU structure is implemented. Please refer to https://leetcode.com/problems/redundant-connection/solution/ for a tutorial on DSU.<br>
     * <p>
     * To our DSU, we can keep a side count of the size of each component. Whenever we union two components together, the size of those components are added.<br>
     * <p>
     * With these details neatly handled by our DSU structure, we can continue in a similar manner to Approach 1: for each node in initial with a unique color, we will consider it as a candidate answer. If no node in initial have a unique color, then we will take min(initial) as the answer.<br><br>
     * <p>
     * Note that for brevity, our DSU implementation does not use union-by-rank. This makes the asymptotic time complexity larger.<br>
     */
    class SolutionUF {
        int[] parent;
        int[] size;
        int max = 0;
        //int node;
        HashMap<Integer, Integer> count = new HashMap<>();

        public int minMalwareSpread(int[][] graph, int[] initial) {
            int n = graph.length;
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (graph[i][j] == 1) {
                        connection(i, j);
                    }
                }
            }
            for (int i : initial) {
                int key = find(i);
                count.put(key, count.getOrDefault(key, 0) + 1);
            }

            Arrays.sort(initial);
            int node = initial[0];
            for (int i : initial) {
                int p = find(i);
                if (count.get(p) != 1) continue;
                if (size[p] > max) {
                    max = size[p];
                    node = i;
                }
            }

            return node;
        }

        public void connection(int v1, int v2) {
            int p1 = find(v1);
            int p2 = find(v2);
            if (p1 == p2) return;
            if (size[p1] >= size[p2]) {
                parent[p2] = parent[p1];
                size[p1] += size[p2];
            } else {
                parent[p1] = parent[p2];
                size[p2] += size[p1];
            }

            return;
        }

        public int find(int p1) {
            if (p1 != parent[p1]) {
                parent[p1] = find(parent[p1]);
            }
            return parent[p1];
        }
    }
}
